// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.EquinixMetal
{
    public static class GetOrganization
    {
        /// <summary>
        /// Provides an Equinix Metal organization datasource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using EquinixMetal = Pulumi.EquinixMetal;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(EquinixMetal.GetOrganization.InvokeAsync(new EquinixMetal.GetOrganizationArgs
        ///         {
        ///             OrganizationId = local.Org_id,
        ///         }));
        ///         this.ProjectsInTheOrg = test.Apply(test =&gt; test.ProjectIds);
        ///     }
        /// 
        ///     [Output("projectsInTheOrg")]
        ///     public Output&lt;string&gt; ProjectsInTheOrg { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOrganizationResult> InvokeAsync(GetOrganizationArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetOrganizationResult>("equinix-metal:index/getOrganization:getOrganization", args ?? new GetOrganizationArgs(), options.WithVersion());

        /// <summary>
        /// Provides an Equinix Metal organization datasource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using EquinixMetal = Pulumi.EquinixMetal;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(EquinixMetal.GetOrganization.InvokeAsync(new EquinixMetal.GetOrganizationArgs
        ///         {
        ///             OrganizationId = local.Org_id,
        ///         }));
        ///         this.ProjectsInTheOrg = test.Apply(test =&gt; test.ProjectIds);
        ///     }
        /// 
        ///     [Output("projectsInTheOrg")]
        ///     public Output&lt;string&gt; ProjectsInTheOrg { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetOrganizationResult> Invoke(GetOrganizationInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetOrganizationResult>("equinix-metal:index/getOrganization:getOrganization", args ?? new GetOrganizationInvokeArgs(), options.WithVersion());
    }


    public sealed class GetOrganizationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The organization name
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The UUID of the organization resource
        /// </summary>
        [Input("organizationId")]
        public string? OrganizationId { get; set; }

        public GetOrganizationArgs()
        {
        }
    }

    public sealed class GetOrganizationInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The organization name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The UUID of the organization resource
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        public GetOrganizationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetOrganizationResult
    {
        /// <summary>
        /// Description string
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Logo URL
        /// </summary>
        public readonly string Logo;
        public readonly string Name;
        public readonly string OrganizationId;
        /// <summary>
        /// UUIDs of project resources which belong to this organization
        /// </summary>
        public readonly ImmutableArray<string> ProjectIds;
        /// <summary>
        /// Twitter handle
        /// </summary>
        public readonly string Twitter;
        /// <summary>
        /// Website link
        /// </summary>
        public readonly string Website;

        [OutputConstructor]
        private GetOrganizationResult(
            string description,

            string id,

            string logo,

            string name,

            string organizationId,

            ImmutableArray<string> projectIds,

            string twitter,

            string website)
        {
            Description = description;
            Id = id;
            Logo = logo;
            Name = name;
            OrganizationId = organizationId;
            ProjectIds = projectIds;
            Twitter = twitter;
            Website = website;
        }
    }
}
