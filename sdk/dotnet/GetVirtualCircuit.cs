// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.EquinixMetal
{
    public static class GetVirtualCircuit
    {
        /// <summary>
        /// Use this data source to retrieve a virtual circuit resource from [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using EquinixMetal = Pulumi.EquinixMetal;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleConnection = Output.Create(EquinixMetal.GetConnection.InvokeAsync(new EquinixMetal.GetConnectionArgs
        ///         {
        ///             ConnectionId = "4347e805-eb46-4699-9eb9-5c116e6a017d",
        ///         }));
        ///         var exampleVc = exampleConnection.Apply(exampleConnection =&gt; Output.Create(EquinixMetal.GetVirtualCircuit.InvokeAsync(new EquinixMetal.GetVirtualCircuitArgs
        ///         {
        ///             VirtualCircuitId = exampleConnection.Ports?[1]?.VirtualCircuitIds?[0],
        ///         })));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVirtualCircuitResult> InvokeAsync(GetVirtualCircuitArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVirtualCircuitResult>("equinix-metal:index/getVirtualCircuit:getVirtualCircuit", args ?? new GetVirtualCircuitArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve a virtual circuit resource from [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using EquinixMetal = Pulumi.EquinixMetal;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleConnection = Output.Create(EquinixMetal.GetConnection.InvokeAsync(new EquinixMetal.GetConnectionArgs
        ///         {
        ///             ConnectionId = "4347e805-eb46-4699-9eb9-5c116e6a017d",
        ///         }));
        ///         var exampleVc = exampleConnection.Apply(exampleConnection =&gt; Output.Create(EquinixMetal.GetVirtualCircuit.InvokeAsync(new EquinixMetal.GetVirtualCircuitArgs
        ///         {
        ///             VirtualCircuitId = exampleConnection.Ports?[1]?.VirtualCircuitIds?[0],
        ///         })));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVirtualCircuitResult> Invoke(GetVirtualCircuitInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVirtualCircuitResult>("equinix-metal:index/getVirtualCircuit:getVirtualCircuit", args ?? new GetVirtualCircuitInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualCircuitArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the virtual circuit resource
        /// </summary>
        [Input("virtualCircuitId", required: true)]
        public string VirtualCircuitId { get; set; } = null!;

        public GetVirtualCircuitArgs()
        {
        }
    }

    public sealed class GetVirtualCircuitInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the virtual circuit resource
        /// </summary>
        [Input("virtualCircuitId", required: true)]
        public Input<string> VirtualCircuitId { get; set; } = null!;

        public GetVirtualCircuitInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVirtualCircuitResult
    {
        /// <summary>
        /// Description for the Virtual Circuit resource
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the virtual circuit resource
        /// </summary>
        public readonly string Name;
        public readonly int NniVlan;
        public readonly int NniVnid;
        /// <summary>
        /// ID of project to which the VC belongs
        /// * `vnid`, `nni_vlan`, `nni_nvid` - VLAN parameters, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/)
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Status of the virtal circuit
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Tags for the Virtual Circuit resource
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly string VirtualCircuitId;
        public readonly int Vnid;

        [OutputConstructor]
        private GetVirtualCircuitResult(
            string description,

            string id,

            string name,

            int nniVlan,

            int nniVnid,

            string projectId,

            string status,

            ImmutableArray<string> tags,

            string virtualCircuitId,

            int vnid)
        {
            Description = description;
            Id = id;
            Name = name;
            NniVlan = nniVlan;
            NniVnid = nniVnid;
            ProjectId = projectId;
            Status = status;
            Tags = tags;
            VirtualCircuitId = virtualCircuitId;
            Vnid = vnid;
        }
    }
}
