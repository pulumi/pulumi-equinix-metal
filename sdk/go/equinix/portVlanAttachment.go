// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a resource to attach device ports to VLANs.
//
// Device and VLAN must be in the same facility.
//
// If you need this resource to add the port back to bond on removal, set `forceBond = true`.
//
// To learn more about Layer 2 networking in Equinix Metal, refer to
//
// * <https://metal.equinix.com/developers/docs/networking/layer2/>
// * <https://metal.equinix.com/developers/docs/networking/layer2-configs/>
//
// ## Example Usage
// ### Hybrid network type
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix-metal/sdk/go/equinix/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testVlan, err := equinix - metal.NewVlan(ctx, "testVlan", &equinix-metal.VlanArgs{
// 			Description: pulumi.String("VLAN in New Jersey"),
// 			Facility:    pulumi.String("ewr1"),
// 			ProjectId:   pulumi.Any(local.Project_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		testDevice, err := equinix - metal.NewDevice(ctx, "testDevice", &equinix-metal.DeviceArgs{
// 			Hostname: pulumi.String("test"),
// 			Plan:     pulumi.String("m1.xlarge.x86"),
// 			Facilities: pulumi.StringArray{
// 				pulumi.String("ewr1"),
// 			},
// 			OperatingSystem: pulumi.String("ubuntu_16_04"),
// 			BillingCycle:    pulumi.String("hourly"),
// 			ProjectId:       pulumi.Any(local.Project_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		testDeviceNetworkType, err := equinix - metal.NewDeviceNetworkType(ctx, "testDeviceNetworkType", &equinix-metal.DeviceNetworkTypeArgs{
// 			DeviceId: testDevice.ID(),
// 			Type:     pulumi.String("hybrid"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = equinix - metal.NewPortVlanAttachment(ctx, "testPortVlanAttachment", &equinix-metal.PortVlanAttachmentArgs{
// 			DeviceId: testDeviceNetworkType.ID(),
// 			PortName: pulumi.String("eth1"),
// 			VlanVnid: testVlan.Vxlan,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Layer 2 network
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix-metal/sdk/go/equinix/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testDevice, err := equinix - metal.NewDevice(ctx, "testDevice", &equinix-metal.DeviceArgs{
// 			Hostname: pulumi.String("test"),
// 			Plan:     pulumi.String("m1.xlarge.x86"),
// 			Facilities: pulumi.StringArray{
// 				pulumi.String("ewr1"),
// 			},
// 			OperatingSystem: pulumi.String("ubuntu_16_04"),
// 			BillingCycle:    pulumi.String("hourly"),
// 			ProjectId:       pulumi.Any(local.Project_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		testDeviceNetworkType, err := equinix - metal.NewDeviceNetworkType(ctx, "testDeviceNetworkType", &equinix-metal.DeviceNetworkTypeArgs{
// 			DeviceId: testDevice.ID(),
// 			Type:     pulumi.String("layer2-individual"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		test1Vlan, err := equinix - metal.NewVlan(ctx, "test1Vlan", &equinix-metal.VlanArgs{
// 			Description: pulumi.String("VLAN in New Jersey"),
// 			Facility:    pulumi.String("ewr1"),
// 			ProjectId:   pulumi.Any(local.Project_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		test2Vlan, err := equinix - metal.NewVlan(ctx, "test2Vlan", &equinix-metal.VlanArgs{
// 			Description: pulumi.String("VLAN in New Jersey"),
// 			Facility:    pulumi.String("ewr1"),
// 			ProjectId:   pulumi.Any(local.Project_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = equinix - metal.NewPortVlanAttachment(ctx, "test1PortVlanAttachment", &equinix-metal.PortVlanAttachmentArgs{
// 			DeviceId: testDeviceNetworkType.ID(),
// 			VlanVnid: test1Vlan.Vxlan,
// 			PortName: pulumi.String("eth1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = equinix - metal.NewPortVlanAttachment(ctx, "test2PortVlanAttachment", &equinix-metal.PortVlanAttachmentArgs{
// 			DeviceId: testDeviceNetworkType.ID(),
// 			VlanVnid: test2Vlan.Vxlan,
// 			PortName: pulumi.String("eth1"),
// 			Native:   pulumi.Bool(true),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			"metal_port_vlan_attachment.test1",
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Attribute Referece
//
// * `id` - UUID of device port used in the assignment
// * `vlanId` - UUID of VLAN API resource
// * `portId` - UUID of device port
type PortVlanAttachment struct {
	pulumi.CustomResourceState

	// ID of device to be assigned to the VLAN
	DeviceId pulumi.StringOutput `pulumi:"deviceId"`
	// Add port back to the bond when this resource is removed. Default is false.
	ForceBond pulumi.BoolPtrOutput `pulumi:"forceBond"`
	// Mark this VLAN a native VLAN on the port. This can be used only if this assignment assigns second or further VLAN to the port. To ensure that this attachment is not first on a port, you can use `dependsOn` pointing to another metal_port_vlan_attachment, just like in the layer2-individual example above.
	Native pulumi.BoolPtrOutput `pulumi:"native"`
	PortId pulumi.StringOutput  `pulumi:"portId"`
	// Name of network port to be assigned to the VLAN
	PortName pulumi.StringOutput `pulumi:"portName"`
	VlanId   pulumi.StringOutput `pulumi:"vlanId"`
	// VXLAN Network Identifier, integer
	VlanVnid pulumi.IntOutput `pulumi:"vlanVnid"`
}

// NewPortVlanAttachment registers a new resource with the given unique name, arguments, and options.
func NewPortVlanAttachment(ctx *pulumi.Context,
	name string, args *PortVlanAttachmentArgs, opts ...pulumi.ResourceOption) (*PortVlanAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	if args.PortName == nil {
		return nil, errors.New("invalid value for required argument 'PortName'")
	}
	if args.VlanVnid == nil {
		return nil, errors.New("invalid value for required argument 'VlanVnid'")
	}
	var resource PortVlanAttachment
	err := ctx.RegisterResource("equinix-metal:index/portVlanAttachment:PortVlanAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortVlanAttachment gets an existing PortVlanAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortVlanAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortVlanAttachmentState, opts ...pulumi.ResourceOption) (*PortVlanAttachment, error) {
	var resource PortVlanAttachment
	err := ctx.ReadResource("equinix-metal:index/portVlanAttachment:PortVlanAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PortVlanAttachment resources.
type portVlanAttachmentState struct {
	// ID of device to be assigned to the VLAN
	DeviceId *string `pulumi:"deviceId"`
	// Add port back to the bond when this resource is removed. Default is false.
	ForceBond *bool `pulumi:"forceBond"`
	// Mark this VLAN a native VLAN on the port. This can be used only if this assignment assigns second or further VLAN to the port. To ensure that this attachment is not first on a port, you can use `dependsOn` pointing to another metal_port_vlan_attachment, just like in the layer2-individual example above.
	Native *bool   `pulumi:"native"`
	PortId *string `pulumi:"portId"`
	// Name of network port to be assigned to the VLAN
	PortName *string `pulumi:"portName"`
	VlanId   *string `pulumi:"vlanId"`
	// VXLAN Network Identifier, integer
	VlanVnid *int `pulumi:"vlanVnid"`
}

type PortVlanAttachmentState struct {
	// ID of device to be assigned to the VLAN
	DeviceId pulumi.StringPtrInput
	// Add port back to the bond when this resource is removed. Default is false.
	ForceBond pulumi.BoolPtrInput
	// Mark this VLAN a native VLAN on the port. This can be used only if this assignment assigns second or further VLAN to the port. To ensure that this attachment is not first on a port, you can use `dependsOn` pointing to another metal_port_vlan_attachment, just like in the layer2-individual example above.
	Native pulumi.BoolPtrInput
	PortId pulumi.StringPtrInput
	// Name of network port to be assigned to the VLAN
	PortName pulumi.StringPtrInput
	VlanId   pulumi.StringPtrInput
	// VXLAN Network Identifier, integer
	VlanVnid pulumi.IntPtrInput
}

func (PortVlanAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*portVlanAttachmentState)(nil)).Elem()
}

type portVlanAttachmentArgs struct {
	// ID of device to be assigned to the VLAN
	DeviceId string `pulumi:"deviceId"`
	// Add port back to the bond when this resource is removed. Default is false.
	ForceBond *bool `pulumi:"forceBond"`
	// Mark this VLAN a native VLAN on the port. This can be used only if this assignment assigns second or further VLAN to the port. To ensure that this attachment is not first on a port, you can use `dependsOn` pointing to another metal_port_vlan_attachment, just like in the layer2-individual example above.
	Native *bool `pulumi:"native"`
	// Name of network port to be assigned to the VLAN
	PortName string `pulumi:"portName"`
	// VXLAN Network Identifier, integer
	VlanVnid int `pulumi:"vlanVnid"`
}

// The set of arguments for constructing a PortVlanAttachment resource.
type PortVlanAttachmentArgs struct {
	// ID of device to be assigned to the VLAN
	DeviceId pulumi.StringInput
	// Add port back to the bond when this resource is removed. Default is false.
	ForceBond pulumi.BoolPtrInput
	// Mark this VLAN a native VLAN on the port. This can be used only if this assignment assigns second or further VLAN to the port. To ensure that this attachment is not first on a port, you can use `dependsOn` pointing to another metal_port_vlan_attachment, just like in the layer2-individual example above.
	Native pulumi.BoolPtrInput
	// Name of network port to be assigned to the VLAN
	PortName pulumi.StringInput
	// VXLAN Network Identifier, integer
	VlanVnid pulumi.IntInput
}

func (PortVlanAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portVlanAttachmentArgs)(nil)).Elem()
}

type PortVlanAttachmentInput interface {
	pulumi.Input

	ToPortVlanAttachmentOutput() PortVlanAttachmentOutput
	ToPortVlanAttachmentOutputWithContext(ctx context.Context) PortVlanAttachmentOutput
}

func (*PortVlanAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((*PortVlanAttachment)(nil))
}

func (i *PortVlanAttachment) ToPortVlanAttachmentOutput() PortVlanAttachmentOutput {
	return i.ToPortVlanAttachmentOutputWithContext(context.Background())
}

func (i *PortVlanAttachment) ToPortVlanAttachmentOutputWithContext(ctx context.Context) PortVlanAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortVlanAttachmentOutput)
}

type PortVlanAttachmentOutput struct {
	*pulumi.OutputState
}

func (PortVlanAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortVlanAttachment)(nil))
}

func (o PortVlanAttachmentOutput) ToPortVlanAttachmentOutput() PortVlanAttachmentOutput {
	return o
}

func (o PortVlanAttachmentOutput) ToPortVlanAttachmentOutputWithContext(ctx context.Context) PortVlanAttachmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PortVlanAttachmentOutput{})
}
