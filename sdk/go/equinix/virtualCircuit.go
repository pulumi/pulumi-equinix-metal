// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-equinix-metal/sdk/v3/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this resource to associate VLAN with a Dedicated Port from [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/#associating-a-vlan-with-a-dedicated-port).
//
// ## Example Usage
//
// Pick an existing Project and Connection, create a VLAN and use `VirtualCircuit` to associate it with a Primary Port of the Connection.
//
// ```go
// package main
//
// import (
//
//	equinix-metal "github.com/pulumi/pulumi-equinix-metal/sdk/v3/go/equinix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// projectId := "52000fb2-ee46-4673-93a8-de2c2bdba33c";
// connId := "73f12f29-3e19-43a0-8e90-ae81580db1e0";
// testConnection, err := equinix-metal.LookupConnection(ctx, &equinix.LookupConnectionArgs{
// ConnectionId: connId,
// }, nil);
// if err != nil {
// return err
// }
// testVlan, err := equinix-metal.NewVlan(ctx, "testVlan", &equinix-metal.VlanArgs{
// ProjectId: pulumi.String(projectId),
// Metro: *pulumi.String(testConnection.Metro),
// })
// if err != nil {
// return err
// }
// _, err = equinix-metal.NewVirtualCircuit(ctx, "testVirtualCircuit", &equinix-metal.VirtualCircuitArgs{
// ConnectionId: pulumi.String(connId),
// ProjectId: pulumi.String(projectId),
// PortId: *pulumi.String(testConnection.Ports[0].Id),
// VlanId: testVlan.ID(),
// NniVlan: pulumi.Int(1056),
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
type VirtualCircuit struct {
	pulumi.CustomResourceState

	// UUID of Connection where the VC is scoped to
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// Description for the Virtual Circuit resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the Virtual Circuit resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Equinix Metal network-to-network VLAN ID
	NniVlan pulumi.IntPtrOutput `pulumi:"nniVlan"`
	// Nni VLAN ID parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
	NniVnid pulumi.IntOutput `pulumi:"nniVnid"`
	// UUID of the Connection Port where the VC is scoped to
	PortId pulumi.StringOutput `pulumi:"portId"`
	// UUID of the Project where the VC is scoped to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Speed of the Virtual Circuit resource
	Speed pulumi.StringOutput `pulumi:"speed"`
	// Status of the virtal circuit
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags for the Virtual Circuit resource
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// UUID of the VLAN to associate
	VlanId pulumi.StringOutput `pulumi:"vlanId"`
	// VNID VLAN parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
	Vnid pulumi.IntOutput `pulumi:"vnid"`
}

// NewVirtualCircuit registers a new resource with the given unique name, arguments, and options.
func NewVirtualCircuit(ctx *pulumi.Context,
	name string, args *VirtualCircuitArgs, opts ...pulumi.ResourceOption) (*VirtualCircuit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.PortId == nil {
		return nil, errors.New("invalid value for required argument 'PortId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.VlanId == nil {
		return nil, errors.New("invalid value for required argument 'VlanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualCircuit
	err := ctx.RegisterResource("equinix-metal:index/virtualCircuit:VirtualCircuit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualCircuit gets an existing VirtualCircuit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualCircuit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualCircuitState, opts ...pulumi.ResourceOption) (*VirtualCircuit, error) {
	var resource VirtualCircuit
	err := ctx.ReadResource("equinix-metal:index/virtualCircuit:VirtualCircuit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualCircuit resources.
type virtualCircuitState struct {
	// UUID of Connection where the VC is scoped to
	ConnectionId *string `pulumi:"connectionId"`
	// Description for the Virtual Circuit resource
	Description *string `pulumi:"description"`
	// Name of the Virtual Circuit resource
	Name *string `pulumi:"name"`
	// Equinix Metal network-to-network VLAN ID
	NniVlan *int `pulumi:"nniVlan"`
	// Nni VLAN ID parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
	NniVnid *int `pulumi:"nniVnid"`
	// UUID of the Connection Port where the VC is scoped to
	PortId *string `pulumi:"portId"`
	// UUID of the Project where the VC is scoped to
	ProjectId *string `pulumi:"projectId"`
	// Speed of the Virtual Circuit resource
	Speed *string `pulumi:"speed"`
	// Status of the virtal circuit
	Status *string `pulumi:"status"`
	// Tags for the Virtual Circuit resource
	Tags []string `pulumi:"tags"`
	// UUID of the VLAN to associate
	VlanId *string `pulumi:"vlanId"`
	// VNID VLAN parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
	Vnid *int `pulumi:"vnid"`
}

type VirtualCircuitState struct {
	// UUID of Connection where the VC is scoped to
	ConnectionId pulumi.StringPtrInput
	// Description for the Virtual Circuit resource
	Description pulumi.StringPtrInput
	// Name of the Virtual Circuit resource
	Name pulumi.StringPtrInput
	// Equinix Metal network-to-network VLAN ID
	NniVlan pulumi.IntPtrInput
	// Nni VLAN ID parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
	NniVnid pulumi.IntPtrInput
	// UUID of the Connection Port where the VC is scoped to
	PortId pulumi.StringPtrInput
	// UUID of the Project where the VC is scoped to
	ProjectId pulumi.StringPtrInput
	// Speed of the Virtual Circuit resource
	Speed pulumi.StringPtrInput
	// Status of the virtal circuit
	Status pulumi.StringPtrInput
	// Tags for the Virtual Circuit resource
	Tags pulumi.StringArrayInput
	// UUID of the VLAN to associate
	VlanId pulumi.StringPtrInput
	// VNID VLAN parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
	Vnid pulumi.IntPtrInput
}

func (VirtualCircuitState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualCircuitState)(nil)).Elem()
}

type virtualCircuitArgs struct {
	// UUID of Connection where the VC is scoped to
	ConnectionId string `pulumi:"connectionId"`
	// Description for the Virtual Circuit resource
	Description *string `pulumi:"description"`
	// Name of the Virtual Circuit resource
	Name *string `pulumi:"name"`
	// Equinix Metal network-to-network VLAN ID
	NniVlan *int `pulumi:"nniVlan"`
	// UUID of the Connection Port where the VC is scoped to
	PortId string `pulumi:"portId"`
	// UUID of the Project where the VC is scoped to
	ProjectId string `pulumi:"projectId"`
	// Speed of the Virtual Circuit resource
	Speed *string `pulumi:"speed"`
	// Tags for the Virtual Circuit resource
	Tags []string `pulumi:"tags"`
	// UUID of the VLAN to associate
	VlanId string `pulumi:"vlanId"`
}

// The set of arguments for constructing a VirtualCircuit resource.
type VirtualCircuitArgs struct {
	// UUID of Connection where the VC is scoped to
	ConnectionId pulumi.StringInput
	// Description for the Virtual Circuit resource
	Description pulumi.StringPtrInput
	// Name of the Virtual Circuit resource
	Name pulumi.StringPtrInput
	// Equinix Metal network-to-network VLAN ID
	NniVlan pulumi.IntPtrInput
	// UUID of the Connection Port where the VC is scoped to
	PortId pulumi.StringInput
	// UUID of the Project where the VC is scoped to
	ProjectId pulumi.StringInput
	// Speed of the Virtual Circuit resource
	Speed pulumi.StringPtrInput
	// Tags for the Virtual Circuit resource
	Tags pulumi.StringArrayInput
	// UUID of the VLAN to associate
	VlanId pulumi.StringInput
}

func (VirtualCircuitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualCircuitArgs)(nil)).Elem()
}

type VirtualCircuitInput interface {
	pulumi.Input

	ToVirtualCircuitOutput() VirtualCircuitOutput
	ToVirtualCircuitOutputWithContext(ctx context.Context) VirtualCircuitOutput
}

func (*VirtualCircuit) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualCircuit)(nil)).Elem()
}

func (i *VirtualCircuit) ToVirtualCircuitOutput() VirtualCircuitOutput {
	return i.ToVirtualCircuitOutputWithContext(context.Background())
}

func (i *VirtualCircuit) ToVirtualCircuitOutputWithContext(ctx context.Context) VirtualCircuitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualCircuitOutput)
}

func (i *VirtualCircuit) ToOutput(ctx context.Context) pulumix.Output[*VirtualCircuit] {
	return pulumix.Output[*VirtualCircuit]{
		OutputState: i.ToVirtualCircuitOutputWithContext(ctx).OutputState,
	}
}

// VirtualCircuitArrayInput is an input type that accepts VirtualCircuitArray and VirtualCircuitArrayOutput values.
// You can construct a concrete instance of `VirtualCircuitArrayInput` via:
//
//	VirtualCircuitArray{ VirtualCircuitArgs{...} }
type VirtualCircuitArrayInput interface {
	pulumi.Input

	ToVirtualCircuitArrayOutput() VirtualCircuitArrayOutput
	ToVirtualCircuitArrayOutputWithContext(context.Context) VirtualCircuitArrayOutput
}

type VirtualCircuitArray []VirtualCircuitInput

func (VirtualCircuitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualCircuit)(nil)).Elem()
}

func (i VirtualCircuitArray) ToVirtualCircuitArrayOutput() VirtualCircuitArrayOutput {
	return i.ToVirtualCircuitArrayOutputWithContext(context.Background())
}

func (i VirtualCircuitArray) ToVirtualCircuitArrayOutputWithContext(ctx context.Context) VirtualCircuitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualCircuitArrayOutput)
}

func (i VirtualCircuitArray) ToOutput(ctx context.Context) pulumix.Output[[]*VirtualCircuit] {
	return pulumix.Output[[]*VirtualCircuit]{
		OutputState: i.ToVirtualCircuitArrayOutputWithContext(ctx).OutputState,
	}
}

// VirtualCircuitMapInput is an input type that accepts VirtualCircuitMap and VirtualCircuitMapOutput values.
// You can construct a concrete instance of `VirtualCircuitMapInput` via:
//
//	VirtualCircuitMap{ "key": VirtualCircuitArgs{...} }
type VirtualCircuitMapInput interface {
	pulumi.Input

	ToVirtualCircuitMapOutput() VirtualCircuitMapOutput
	ToVirtualCircuitMapOutputWithContext(context.Context) VirtualCircuitMapOutput
}

type VirtualCircuitMap map[string]VirtualCircuitInput

func (VirtualCircuitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualCircuit)(nil)).Elem()
}

func (i VirtualCircuitMap) ToVirtualCircuitMapOutput() VirtualCircuitMapOutput {
	return i.ToVirtualCircuitMapOutputWithContext(context.Background())
}

func (i VirtualCircuitMap) ToVirtualCircuitMapOutputWithContext(ctx context.Context) VirtualCircuitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualCircuitMapOutput)
}

func (i VirtualCircuitMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VirtualCircuit] {
	return pulumix.Output[map[string]*VirtualCircuit]{
		OutputState: i.ToVirtualCircuitMapOutputWithContext(ctx).OutputState,
	}
}

type VirtualCircuitOutput struct{ *pulumi.OutputState }

func (VirtualCircuitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualCircuit)(nil)).Elem()
}

func (o VirtualCircuitOutput) ToVirtualCircuitOutput() VirtualCircuitOutput {
	return o
}

func (o VirtualCircuitOutput) ToVirtualCircuitOutputWithContext(ctx context.Context) VirtualCircuitOutput {
	return o
}

func (o VirtualCircuitOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualCircuit] {
	return pulumix.Output[*VirtualCircuit]{
		OutputState: o.OutputState,
	}
}

// UUID of Connection where the VC is scoped to
func (o VirtualCircuitOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCircuit) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// Description for the Virtual Circuit resource
func (o VirtualCircuitOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualCircuit) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the Virtual Circuit resource
func (o VirtualCircuitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCircuit) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Equinix Metal network-to-network VLAN ID
func (o VirtualCircuitOutput) NniVlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualCircuit) pulumi.IntPtrOutput { return v.NniVlan }).(pulumi.IntPtrOutput)
}

// Nni VLAN ID parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
func (o VirtualCircuitOutput) NniVnid() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualCircuit) pulumi.IntOutput { return v.NniVnid }).(pulumi.IntOutput)
}

// UUID of the Connection Port where the VC is scoped to
func (o VirtualCircuitOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCircuit) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

// UUID of the Project where the VC is scoped to
func (o VirtualCircuitOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCircuit) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Speed of the Virtual Circuit resource
func (o VirtualCircuitOutput) Speed() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCircuit) pulumi.StringOutput { return v.Speed }).(pulumi.StringOutput)
}

// Status of the virtal circuit
func (o VirtualCircuitOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCircuit) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags for the Virtual Circuit resource
func (o VirtualCircuitOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualCircuit) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// UUID of the VLAN to associate
func (o VirtualCircuitOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCircuit) pulumi.StringOutput { return v.VlanId }).(pulumi.StringOutput)
}

// VNID VLAN parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
func (o VirtualCircuitOutput) Vnid() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualCircuit) pulumi.IntOutput { return v.Vnid }).(pulumi.IntOutput)
}

type VirtualCircuitArrayOutput struct{ *pulumi.OutputState }

func (VirtualCircuitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualCircuit)(nil)).Elem()
}

func (o VirtualCircuitArrayOutput) ToVirtualCircuitArrayOutput() VirtualCircuitArrayOutput {
	return o
}

func (o VirtualCircuitArrayOutput) ToVirtualCircuitArrayOutputWithContext(ctx context.Context) VirtualCircuitArrayOutput {
	return o
}

func (o VirtualCircuitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VirtualCircuit] {
	return pulumix.Output[[]*VirtualCircuit]{
		OutputState: o.OutputState,
	}
}

func (o VirtualCircuitArrayOutput) Index(i pulumi.IntInput) VirtualCircuitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualCircuit {
		return vs[0].([]*VirtualCircuit)[vs[1].(int)]
	}).(VirtualCircuitOutput)
}

type VirtualCircuitMapOutput struct{ *pulumi.OutputState }

func (VirtualCircuitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualCircuit)(nil)).Elem()
}

func (o VirtualCircuitMapOutput) ToVirtualCircuitMapOutput() VirtualCircuitMapOutput {
	return o
}

func (o VirtualCircuitMapOutput) ToVirtualCircuitMapOutputWithContext(ctx context.Context) VirtualCircuitMapOutput {
	return o
}

func (o VirtualCircuitMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VirtualCircuit] {
	return pulumix.Output[map[string]*VirtualCircuit]{
		OutputState: o.OutputState,
	}
}

func (o VirtualCircuitMapOutput) MapIndex(k pulumi.StringInput) VirtualCircuitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualCircuit {
		return vs[0].(map[string]*VirtualCircuit)[vs[1].(string)]
	}).(VirtualCircuitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualCircuitInput)(nil)).Elem(), &VirtualCircuit{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualCircuitArrayInput)(nil)).Elem(), VirtualCircuitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualCircuitMapInput)(nil)).Elem(), VirtualCircuitMap{})
	pulumi.RegisterOutputType(VirtualCircuitOutput{})
	pulumi.RegisterOutputType(VirtualCircuitArrayOutput{})
	pulumi.RegisterOutputType(VirtualCircuitMapOutput{})
}
