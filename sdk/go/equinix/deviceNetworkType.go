// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// This resource can also be imported using existing device ID
//
// ```sh
//  $ pulumi import equinix-metal:index/deviceNetworkType:DeviceNetworkType metal_device_network_type {existing device_id}
// ```
type DeviceNetworkType struct {
	pulumi.CustomResourceState

	// The ID of the device on which the network type should be set.
	DeviceId pulumi.StringOutput `pulumi:"deviceId"`
	// Network type to set. Must be one of `layer3`, `hybrid`, `layer2-individual` and `layer2-bonded`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDeviceNetworkType registers a new resource with the given unique name, arguments, and options.
func NewDeviceNetworkType(ctx *pulumi.Context,
	name string, args *DeviceNetworkTypeArgs, opts ...pulumi.ResourceOption) (*DeviceNetworkType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource DeviceNetworkType
	err := ctx.RegisterResource("equinix-metal:index/deviceNetworkType:DeviceNetworkType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceNetworkType gets an existing DeviceNetworkType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceNetworkType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceNetworkTypeState, opts ...pulumi.ResourceOption) (*DeviceNetworkType, error) {
	var resource DeviceNetworkType
	err := ctx.ReadResource("equinix-metal:index/deviceNetworkType:DeviceNetworkType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceNetworkType resources.
type deviceNetworkTypeState struct {
	// The ID of the device on which the network type should be set.
	DeviceId *string `pulumi:"deviceId"`
	// Network type to set. Must be one of `layer3`, `hybrid`, `layer2-individual` and `layer2-bonded`.
	Type *string `pulumi:"type"`
}

type DeviceNetworkTypeState struct {
	// The ID of the device on which the network type should be set.
	DeviceId pulumi.StringPtrInput
	// Network type to set. Must be one of `layer3`, `hybrid`, `layer2-individual` and `layer2-bonded`.
	Type pulumi.StringPtrInput
}

func (DeviceNetworkTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceNetworkTypeState)(nil)).Elem()
}

type deviceNetworkTypeArgs struct {
	// The ID of the device on which the network type should be set.
	DeviceId string `pulumi:"deviceId"`
	// Network type to set. Must be one of `layer3`, `hybrid`, `layer2-individual` and `layer2-bonded`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DeviceNetworkType resource.
type DeviceNetworkTypeArgs struct {
	// The ID of the device on which the network type should be set.
	DeviceId pulumi.StringInput
	// Network type to set. Must be one of `layer3`, `hybrid`, `layer2-individual` and `layer2-bonded`.
	Type pulumi.StringInput
}

func (DeviceNetworkTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceNetworkTypeArgs)(nil)).Elem()
}

type DeviceNetworkTypeInput interface {
	pulumi.Input

	ToDeviceNetworkTypeOutput() DeviceNetworkTypeOutput
	ToDeviceNetworkTypeOutputWithContext(ctx context.Context) DeviceNetworkTypeOutput
}

func (DeviceNetworkType) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceNetworkType)(nil)).Elem()
}

func (i DeviceNetworkType) ToDeviceNetworkTypeOutput() DeviceNetworkTypeOutput {
	return i.ToDeviceNetworkTypeOutputWithContext(context.Background())
}

func (i DeviceNetworkType) ToDeviceNetworkTypeOutputWithContext(ctx context.Context) DeviceNetworkTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceNetworkTypeOutput)
}

type DeviceNetworkTypeOutput struct {
	*pulumi.OutputState
}

func (DeviceNetworkTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceNetworkTypeOutput)(nil)).Elem()
}

func (o DeviceNetworkTypeOutput) ToDeviceNetworkTypeOutput() DeviceNetworkTypeOutput {
	return o
}

func (o DeviceNetworkTypeOutput) ToDeviceNetworkTypeOutputWithContext(ctx context.Context) DeviceNetworkTypeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DeviceNetworkTypeOutput{})
}
