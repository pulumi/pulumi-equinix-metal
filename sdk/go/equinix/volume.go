// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Volume struct {
	pulumi.CustomResourceState

	// A list of attachments, each with it's own `href` attribute
	Attachments VolumeAttachmentTypeArrayOutput `pulumi:"attachments"`
	// The billing cycle, defaults to "hourly"
	BillingCycle pulumi.StringOutput `pulumi:"billingCycle"`
	// The timestamp for when the volume was created
	Created pulumi.StringOutput `pulumi:"created"`
	// Optional description for the volume
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The facility to create the volume in
	Facility pulumi.StringOutput `pulumi:"facility"`
	// Lock or unlock the volume
	Locked pulumi.BoolPtrOutput `pulumi:"locked"`
	// The name of the volume
	Name pulumi.StringOutput `pulumi:"name"`
	// The service plan slug of the volume
	Plan pulumi.StringOutput `pulumi:"plan"`
	// The metal project ID to deploy the volume in
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The size in GB to make the volume
	Size pulumi.IntOutput `pulumi:"size"`
	// Optional list of snapshot policies
	SnapshotPolicies VolumeSnapshotPolicyArrayOutput `pulumi:"snapshotPolicies"`
	// The state of the volume
	State pulumi.StringOutput `pulumi:"state"`
	// The timestamp for the last time the volume was updated
	Updated pulumi.StringOutput `pulumi:"updated"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Facility == nil {
		return nil, errors.New("invalid value for required argument 'Facility'")
	}
	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	var resource Volume
	err := ctx.RegisterResource("equinix-metal:index/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("equinix-metal:index/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// A list of attachments, each with it's own `href` attribute
	Attachments []VolumeAttachmentType `pulumi:"attachments"`
	// The billing cycle, defaults to "hourly"
	BillingCycle *string `pulumi:"billingCycle"`
	// The timestamp for when the volume was created
	Created *string `pulumi:"created"`
	// Optional description for the volume
	Description *string `pulumi:"description"`
	// The facility to create the volume in
	Facility *string `pulumi:"facility"`
	// Lock or unlock the volume
	Locked *bool `pulumi:"locked"`
	// The name of the volume
	Name *string `pulumi:"name"`
	// The service plan slug of the volume
	Plan *string `pulumi:"plan"`
	// The metal project ID to deploy the volume in
	ProjectId *string `pulumi:"projectId"`
	// The size in GB to make the volume
	Size *int `pulumi:"size"`
	// Optional list of snapshot policies
	SnapshotPolicies []VolumeSnapshotPolicy `pulumi:"snapshotPolicies"`
	// The state of the volume
	State *string `pulumi:"state"`
	// The timestamp for the last time the volume was updated
	Updated *string `pulumi:"updated"`
}

type VolumeState struct {
	// A list of attachments, each with it's own `href` attribute
	Attachments VolumeAttachmentTypeArrayInput
	// The billing cycle, defaults to "hourly"
	BillingCycle pulumi.StringPtrInput
	// The timestamp for when the volume was created
	Created pulumi.StringPtrInput
	// Optional description for the volume
	Description pulumi.StringPtrInput
	// The facility to create the volume in
	Facility pulumi.StringPtrInput
	// Lock or unlock the volume
	Locked pulumi.BoolPtrInput
	// The name of the volume
	Name pulumi.StringPtrInput
	// The service plan slug of the volume
	Plan pulumi.StringPtrInput
	// The metal project ID to deploy the volume in
	ProjectId pulumi.StringPtrInput
	// The size in GB to make the volume
	Size pulumi.IntPtrInput
	// Optional list of snapshot policies
	SnapshotPolicies VolumeSnapshotPolicyArrayInput
	// The state of the volume
	State pulumi.StringPtrInput
	// The timestamp for the last time the volume was updated
	Updated pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// The billing cycle, defaults to "hourly"
	BillingCycle *string `pulumi:"billingCycle"`
	// Optional description for the volume
	Description *string `pulumi:"description"`
	// The facility to create the volume in
	Facility string `pulumi:"facility"`
	// Lock or unlock the volume
	Locked *bool `pulumi:"locked"`
	// The service plan slug of the volume
	Plan string `pulumi:"plan"`
	// The metal project ID to deploy the volume in
	ProjectId string `pulumi:"projectId"`
	// The size in GB to make the volume
	Size int `pulumi:"size"`
	// Optional list of snapshot policies
	SnapshotPolicies []VolumeSnapshotPolicy `pulumi:"snapshotPolicies"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// The billing cycle, defaults to "hourly"
	BillingCycle pulumi.StringPtrInput
	// Optional description for the volume
	Description pulumi.StringPtrInput
	// The facility to create the volume in
	Facility pulumi.StringInput
	// Lock or unlock the volume
	Locked pulumi.BoolPtrInput
	// The service plan slug of the volume
	Plan pulumi.StringInput
	// The metal project ID to deploy the volume in
	ProjectId pulumi.StringInput
	// The size in GB to make the volume
	Size pulumi.IntInput
	// Optional list of snapshot policies
	SnapshotPolicies VolumeSnapshotPolicyArrayInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil))
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

func (i *Volume) ToVolumePtrOutput() VolumePtrOutput {
	return i.ToVolumePtrOutputWithContext(context.Background())
}

func (i *Volume) ToVolumePtrOutputWithContext(ctx context.Context) VolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePtrOutput)
}

type VolumePtrInput interface {
	pulumi.Input

	ToVolumePtrOutput() VolumePtrOutput
	ToVolumePtrOutputWithContext(ctx context.Context) VolumePtrOutput
}

type volumePtrType VolumeArgs

func (*volumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil))
}

func (i *volumePtrType) ToVolumePtrOutput() VolumePtrOutput {
	return i.ToVolumePtrOutputWithContext(context.Background())
}

func (i *volumePtrType) ToVolumePtrOutputWithContext(ctx context.Context) VolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePtrOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//          VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Volume)(nil))
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//          VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Volume)(nil))
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

type VolumeOutput struct {
	*pulumi.OutputState
}

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil))
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumePtrOutput() VolumePtrOutput {
	return o.ToVolumePtrOutputWithContext(context.Background())
}

func (o VolumeOutput) ToVolumePtrOutputWithContext(ctx context.Context) VolumePtrOutput {
	return o.ApplyT(func(v Volume) *Volume {
		return &v
	}).(VolumePtrOutput)
}

type VolumePtrOutput struct {
	*pulumi.OutputState
}

func (VolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil))
}

func (o VolumePtrOutput) ToVolumePtrOutput() VolumePtrOutput {
	return o
}

func (o VolumePtrOutput) ToVolumePtrOutputWithContext(ctx context.Context) VolumePtrOutput {
	return o
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil))
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Volume {
		return vs[0].([]Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Volume)(nil))
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Volume {
		return vs[0].(map[string]Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumePtrOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}
