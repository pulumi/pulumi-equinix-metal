// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource `Volume` was removed in version 3.0.0, and the API support was deprecated on June 1st 2021. See https://metal.equinix.com/developers/docs/storage/elastic-block-storage/#elastic-block-storage for more details.
type Volume struct {
	pulumi.CustomResourceState

	Attachments      VolumeAttachmentTypeArrayOutput `pulumi:"attachments"`
	BillingCycle     pulumi.StringOutput             `pulumi:"billingCycle"`
	Created          pulumi.StringOutput             `pulumi:"created"`
	Description      pulumi.StringPtrOutput          `pulumi:"description"`
	Facility         pulumi.StringOutput             `pulumi:"facility"`
	Locked           pulumi.BoolPtrOutput            `pulumi:"locked"`
	Name             pulumi.StringOutput             `pulumi:"name"`
	Plan             pulumi.StringOutput             `pulumi:"plan"`
	ProjectId        pulumi.StringOutput             `pulumi:"projectId"`
	Size             pulumi.IntOutput                `pulumi:"size"`
	SnapshotPolicies VolumeSnapshotPolicyArrayOutput `pulumi:"snapshotPolicies"`
	State            pulumi.StringOutput             `pulumi:"state"`
	Updated          pulumi.StringOutput             `pulumi:"updated"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Facility == nil {
		return nil, errors.New("invalid value for required argument 'Facility'")
	}
	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	var resource Volume
	err := ctx.RegisterResource("equinix-metal:index/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("equinix-metal:index/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	Attachments      []VolumeAttachmentType `pulumi:"attachments"`
	BillingCycle     *string                `pulumi:"billingCycle"`
	Created          *string                `pulumi:"created"`
	Description      *string                `pulumi:"description"`
	Facility         *string                `pulumi:"facility"`
	Locked           *bool                  `pulumi:"locked"`
	Name             *string                `pulumi:"name"`
	Plan             *string                `pulumi:"plan"`
	ProjectId        *string                `pulumi:"projectId"`
	Size             *int                   `pulumi:"size"`
	SnapshotPolicies []VolumeSnapshotPolicy `pulumi:"snapshotPolicies"`
	State            *string                `pulumi:"state"`
	Updated          *string                `pulumi:"updated"`
}

type VolumeState struct {
	Attachments      VolumeAttachmentTypeArrayInput
	BillingCycle     pulumi.StringPtrInput
	Created          pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	Facility         pulumi.StringPtrInput
	Locked           pulumi.BoolPtrInput
	Name             pulumi.StringPtrInput
	Plan             pulumi.StringPtrInput
	ProjectId        pulumi.StringPtrInput
	Size             pulumi.IntPtrInput
	SnapshotPolicies VolumeSnapshotPolicyArrayInput
	State            pulumi.StringPtrInput
	Updated          pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	BillingCycle     *string                `pulumi:"billingCycle"`
	Description      *string                `pulumi:"description"`
	Facility         string                 `pulumi:"facility"`
	Locked           *bool                  `pulumi:"locked"`
	Plan             string                 `pulumi:"plan"`
	ProjectId        string                 `pulumi:"projectId"`
	Size             int                    `pulumi:"size"`
	SnapshotPolicies []VolumeSnapshotPolicy `pulumi:"snapshotPolicies"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	BillingCycle     pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	Facility         pulumi.StringInput
	Locked           pulumi.BoolPtrInput
	Plan             pulumi.StringInput
	ProjectId        pulumi.StringInput
	Size             pulumi.IntInput
	SnapshotPolicies VolumeSnapshotPolicyArrayInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//          VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//          VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].([]*Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].(map[string]*Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMapInput)(nil)).Elem(), VolumeMap{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}
