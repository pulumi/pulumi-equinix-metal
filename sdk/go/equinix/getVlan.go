// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Equinix Metal Virtual Network datasource. VLANs data sources can be
// searched by VLAN UUID, or project UUID and vxlan number.
//
// ## Example Usage
//
// Fetch a vlan by ID:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix-metal/sdk/v2/go/equinix-metal"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foovlan, err := equinix - metal.NewVlan(ctx, "foovlan", &equinix-metal.VlanArgs{
// 			ProjectId: pulumi.Any(local.Project_id),
// 			Metro:     pulumi.String("sv"),
// 			Vxlan:     pulumi.Int(5),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Fetch a vlan by project ID, vxlan and metro
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix-metal/sdk/v2/go/equinix-metal"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := equinix - metal.NewVlan(ctx, "foovlan", &equinix-metal.VlanArgs{
// 			ProjectId: pulumi.Any(local.Project_id),
// 			Metro:     pulumi.String("sv"),
// 			Vxlan:     pulumi.Int(5),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		opt0 := local.Project_id
// 		opt1 := 5
// 		opt2 := "sv"
// 		_, err = equinix - metal.LookupVlan(ctx, &equinix-metal.LookupVlanArgs{
// 			ProjectId: &opt0,
// 			Vxlan:     &opt1,
// 			Metro:     &opt2,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupVlan(ctx *pulumi.Context, args *LookupVlanArgs, opts ...pulumi.InvokeOption) (*LookupVlanResult, error) {
	var rv LookupVlanResult
	err := ctx.Invoke("equinix-metal:index/getVlan:getVlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVlan.
type LookupVlanArgs struct {
	// Facility where the VLAN is deployed
	Facility *string `pulumi:"facility"`
	// Metro where the VLAN is deployed
	Metro *string `pulumi:"metro"`
	// UUID of parent project of the VLAN. Use together with the vxlan number and metro or facility
	ProjectId *string `pulumi:"projectId"`
	// Metal UUID of the VLAN resource to look up
	VlanId *string `pulumi:"vlanId"`
	// vxlan number of the VLAN to look up. Use together with the projectId and metro or facility
	Vxlan *int `pulumi:"vxlan"`
}

// A collection of values returned by getVlan.
type LookupVlanResult struct {
	// List of device ID to which this VLAN is assigned
	AssignedDevicesIds []string `pulumi:"assignedDevicesIds"`
	// Description text of the VLAN resource
	Description string `pulumi:"description"`
	Facility    string `pulumi:"facility"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	Metro     string `pulumi:"metro"`
	ProjectId string `pulumi:"projectId"`
	VlanId    string `pulumi:"vlanId"`
	Vxlan     int    `pulumi:"vxlan"`
}
