// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.equinixmetal.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.equinixmetal.outputs.GetConnectionPort;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetConnectionResult {
    private String connectionId;
    /**
     * @return Description of the connection resource
     * 
     */
    private String description;
    /**
     * @return Slug of a facility to which the connection belongs
     * 
     */
    private String facility;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Slug of a metro to which the connection belongs
     * 
     */
    private String metro;
    /**
     * @return Mode for connections in IBX facilities with the dedicated type - standard or tunnel
     * 
     */
    private String mode;
    /**
     * @return Port name
     * 
     */
    private String name;
    /**
     * @return ID of organization to which the connection belongs
     * 
     */
    private String organizationId;
    /**
     * @return List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)
     * 
     */
    private List<GetConnectionPort> ports;
    /**
     * @return ID of project to which the connection belongs
     * 
     */
    private String projectId;
    /**
     * @return Connection redundancy, reduntant or primary
     * 
     */
    private String redundancy;
    /**
     * @return Port speed in bits per second
     * 
     */
    private Integer speed;
    /**
     * @return Port status
     * 
     */
    private String status;
    /**
     * @return String list of tags
     * 
     */
    private List<String> tags;
    /**
     * @return Fabric Token for the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard)
     * 
     */
    private String token;
    /**
     * @return Connection type, dedicated or shared
     * 
     */
    private String type;

    private GetConnectionResult() {}
    public String connectionId() {
        return this.connectionId;
    }
    /**
     * @return Description of the connection resource
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Slug of a facility to which the connection belongs
     * 
     */
    public String facility() {
        return this.facility;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Slug of a metro to which the connection belongs
     * 
     */
    public String metro() {
        return this.metro;
    }
    /**
     * @return Mode for connections in IBX facilities with the dedicated type - standard or tunnel
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return Port name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return ID of organization to which the connection belongs
     * 
     */
    public String organizationId() {
        return this.organizationId;
    }
    /**
     * @return List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)
     * 
     */
    public List<GetConnectionPort> ports() {
        return this.ports;
    }
    /**
     * @return ID of project to which the connection belongs
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Connection redundancy, reduntant or primary
     * 
     */
    public String redundancy() {
        return this.redundancy;
    }
    /**
     * @return Port speed in bits per second
     * 
     */
    public Integer speed() {
        return this.speed;
    }
    /**
     * @return Port status
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return String list of tags
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Fabric Token for the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard)
     * 
     */
    public String token() {
        return this.token;
    }
    /**
     * @return Connection type, dedicated or shared
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectionId;
        private String description;
        private String facility;
        private String id;
        private String metro;
        private String mode;
        private String name;
        private String organizationId;
        private List<GetConnectionPort> ports;
        private String projectId;
        private String redundancy;
        private Integer speed;
        private String status;
        private List<String> tags;
        private String token;
        private String type;
        public Builder() {}
        public Builder(GetConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionId = defaults.connectionId;
    	      this.description = defaults.description;
    	      this.facility = defaults.facility;
    	      this.id = defaults.id;
    	      this.metro = defaults.metro;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.organizationId = defaults.organizationId;
    	      this.ports = defaults.ports;
    	      this.projectId = defaults.projectId;
    	      this.redundancy = defaults.redundancy;
    	      this.speed = defaults.speed;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.token = defaults.token;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder connectionId(String connectionId) {
            this.connectionId = Objects.requireNonNull(connectionId);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder facility(String facility) {
            this.facility = Objects.requireNonNull(facility);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder metro(String metro) {
            this.metro = Objects.requireNonNull(metro);
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(String organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId);
            return this;
        }
        @CustomType.Setter
        public Builder ports(List<GetConnectionPort> ports) {
            this.ports = Objects.requireNonNull(ports);
            return this;
        }
        public Builder ports(GetConnectionPort... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder redundancy(String redundancy) {
            this.redundancy = Objects.requireNonNull(redundancy);
            return this;
        }
        @CustomType.Setter
        public Builder speed(Integer speed) {
            this.speed = Objects.requireNonNull(speed);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder token(String token) {
            this.token = Objects.requireNonNull(token);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetConnectionResult build() {
            final var o = new GetConnectionResult();
            o.connectionId = connectionId;
            o.description = description;
            o.facility = facility;
            o.id = id;
            o.metro = metro;
            o.mode = mode;
            o.name = name;
            o.organizationId = organizationId;
            o.ports = ports;
            o.projectId = projectId;
            o.redundancy = redundancy;
            o.speed = speed;
            o.status = status;
            o.tags = tags;
            o.token = token;
            o.type = type;
            return o;
        }
    }
}
