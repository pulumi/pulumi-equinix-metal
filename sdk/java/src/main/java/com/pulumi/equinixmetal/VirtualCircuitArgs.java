// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.equinixmetal;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualCircuitArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualCircuitArgs Empty = new VirtualCircuitArgs();

    /**
     * UUID of Connection where the VC is scoped to
     * 
     */
    @Import(name="connectionId", required=true)
    private Output<String> connectionId;

    /**
     * @return UUID of Connection where the VC is scoped to
     * 
     */
    public Output<String> connectionId() {
        return this.connectionId;
    }

    /**
     * Description for the Virtual Circuit resource
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description for the Virtual Circuit resource
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the Virtual Circuit resource
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Virtual Circuit resource
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Equinix Metal network-to-network VLAN ID
     * 
     */
    @Import(name="nniVlan")
    private @Nullable Output<Integer> nniVlan;

    /**
     * @return Equinix Metal network-to-network VLAN ID
     * 
     */
    public Optional<Output<Integer>> nniVlan() {
        return Optional.ofNullable(this.nniVlan);
    }

    /**
     * UUID of the Connection Port where the VC is scoped to
     * 
     */
    @Import(name="portId", required=true)
    private Output<String> portId;

    /**
     * @return UUID of the Connection Port where the VC is scoped to
     * 
     */
    public Output<String> portId() {
        return this.portId;
    }

    /**
     * UUID of the Project where the VC is scoped to
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return UUID of the Project where the VC is scoped to
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Speed of the Virtual Circuit resource
     * 
     */
    @Import(name="speed")
    private @Nullable Output<String> speed;

    /**
     * @return Speed of the Virtual Circuit resource
     * 
     */
    public Optional<Output<String>> speed() {
        return Optional.ofNullable(this.speed);
    }

    /**
     * Tags for the Virtual Circuit resource
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags for the Virtual Circuit resource
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * UUID of the VLAN to associate
     * 
     */
    @Import(name="vlanId", required=true)
    private Output<String> vlanId;

    /**
     * @return UUID of the VLAN to associate
     * 
     */
    public Output<String> vlanId() {
        return this.vlanId;
    }

    private VirtualCircuitArgs() {}

    private VirtualCircuitArgs(VirtualCircuitArgs $) {
        this.connectionId = $.connectionId;
        this.description = $.description;
        this.name = $.name;
        this.nniVlan = $.nniVlan;
        this.portId = $.portId;
        this.projectId = $.projectId;
        this.speed = $.speed;
        this.tags = $.tags;
        this.vlanId = $.vlanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualCircuitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualCircuitArgs $;

        public Builder() {
            $ = new VirtualCircuitArgs();
        }

        public Builder(VirtualCircuitArgs defaults) {
            $ = new VirtualCircuitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId UUID of Connection where the VC is scoped to
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId UUID of Connection where the VC is scoped to
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param description Description for the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nniVlan Equinix Metal network-to-network VLAN ID
         * 
         * @return builder
         * 
         */
        public Builder nniVlan(@Nullable Output<Integer> nniVlan) {
            $.nniVlan = nniVlan;
            return this;
        }

        /**
         * @param nniVlan Equinix Metal network-to-network VLAN ID
         * 
         * @return builder
         * 
         */
        public Builder nniVlan(Integer nniVlan) {
            return nniVlan(Output.of(nniVlan));
        }

        /**
         * @param portId UUID of the Connection Port where the VC is scoped to
         * 
         * @return builder
         * 
         */
        public Builder portId(Output<String> portId) {
            $.portId = portId;
            return this;
        }

        /**
         * @param portId UUID of the Connection Port where the VC is scoped to
         * 
         * @return builder
         * 
         */
        public Builder portId(String portId) {
            return portId(Output.of(portId));
        }

        /**
         * @param projectId UUID of the Project where the VC is scoped to
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId UUID of the Project where the VC is scoped to
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param speed Speed of the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder speed(@Nullable Output<String> speed) {
            $.speed = speed;
            return this;
        }

        /**
         * @param speed Speed of the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder speed(String speed) {
            return speed(Output.of(speed));
        }

        /**
         * @param tags Tags for the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags for the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags for the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param vlanId UUID of the VLAN to associate
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Output<String> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId UUID of the VLAN to associate
         * 
         * @return builder
         * 
         */
        public Builder vlanId(String vlanId) {
            return vlanId(Output.of(vlanId));
        }

        public VirtualCircuitArgs build() {
            $.connectionId = Objects.requireNonNull($.connectionId, "expected parameter 'connectionId' to be non-null");
            $.portId = Objects.requireNonNull($.portId, "expected parameter 'portId' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.vlanId = Objects.requireNonNull($.vlanId, "expected parameter 'vlanId' to be non-null");
            return $;
        }
    }

}
