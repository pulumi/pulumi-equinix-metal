// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.equinixmetal;

import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.equinixmetal.enums.BillingCycle;
import com.pulumi.equinixmetal.enums.Facility;
import com.pulumi.equinixmetal.inputs.VolumeSnapshotPolicyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    @Import(name="billingCycle")
    private @Nullable Output<Either<String,BillingCycle>> billingCycle;

    public Optional<Output<Either<String,BillingCycle>>> billingCycle() {
        return Optional.ofNullable(this.billingCycle);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="facility", required=true)
    private Output<Either<String,Facility>> facility;

    public Output<Either<String,Facility>> facility() {
        return this.facility;
    }

    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    @Import(name="plan", required=true)
    private Output<String> plan;

    public Output<String> plan() {
        return this.plan;
    }

    @Import(name="projectId", required=true)
    private Output<String> projectId;

    public Output<String> projectId() {
        return this.projectId;
    }

    @Import(name="size", required=true)
    private Output<Integer> size;

    public Output<Integer> size() {
        return this.size;
    }

    @Import(name="snapshotPolicies")
    private @Nullable Output<List<VolumeSnapshotPolicyArgs>> snapshotPolicies;

    public Optional<Output<List<VolumeSnapshotPolicyArgs>>> snapshotPolicies() {
        return Optional.ofNullable(this.snapshotPolicies);
    }

    private VolumeArgs() {}

    private VolumeArgs(VolumeArgs $) {
        this.billingCycle = $.billingCycle;
        this.description = $.description;
        this.facility = $.facility;
        this.locked = $.locked;
        this.plan = $.plan;
        this.projectId = $.projectId;
        this.size = $.size;
        this.snapshotPolicies = $.snapshotPolicies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeArgs $;

        public Builder() {
            $ = new VolumeArgs();
        }

        public Builder(VolumeArgs defaults) {
            $ = new VolumeArgs(Objects.requireNonNull(defaults));
        }

        public Builder billingCycle(@Nullable Output<Either<String,BillingCycle>> billingCycle) {
            $.billingCycle = billingCycle;
            return this;
        }

        public Builder billingCycle(Either<String,BillingCycle> billingCycle) {
            return billingCycle(Output.of(billingCycle));
        }

        public Builder billingCycle(String billingCycle) {
            return billingCycle(Either.ofLeft(billingCycle));
        }

        public Builder billingCycle(BillingCycle billingCycle) {
            return billingCycle(Either.ofRight(billingCycle));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder facility(Output<Either<String,Facility>> facility) {
            $.facility = facility;
            return this;
        }

        public Builder facility(Either<String,Facility> facility) {
            return facility(Output.of(facility));
        }

        public Builder facility(String facility) {
            return facility(Either.ofLeft(facility));
        }

        public Builder facility(Facility facility) {
            return facility(Either.ofRight(facility));
        }

        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        public Builder plan(Output<String> plan) {
            $.plan = plan;
            return this;
        }

        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public Builder snapshotPolicies(@Nullable Output<List<VolumeSnapshotPolicyArgs>> snapshotPolicies) {
            $.snapshotPolicies = snapshotPolicies;
            return this;
        }

        public Builder snapshotPolicies(List<VolumeSnapshotPolicyArgs> snapshotPolicies) {
            return snapshotPolicies(Output.of(snapshotPolicies));
        }

        public Builder snapshotPolicies(VolumeSnapshotPolicyArgs... snapshotPolicies) {
            return snapshotPolicies(List.of(snapshotPolicies));
        }

        public VolumeArgs build() {
            $.facility = Objects.requireNonNull($.facility, "expected parameter 'facility' to be non-null");
            $.plan = Objects.requireNonNull($.plan, "expected parameter 'plan' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.size = Objects.requireNonNull($.size, "expected parameter 'size' to be non-null");
            return $;
        }
    }

}
