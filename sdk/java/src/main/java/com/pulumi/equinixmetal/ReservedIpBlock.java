// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.equinixmetal;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.equinixmetal.ReservedIpBlockArgs;
import com.pulumi.equinixmetal.Utilities;
import com.pulumi.equinixmetal.inputs.ReservedIpBlockState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a resource to create and manage blocks of reserved IP addresses in a project.
 * 
 * When a user provisions first device in a facility, Equinix Metal API automatically allocates IPv6/56 and private IPv4/25 blocks.
 * The new device then gets IPv6 and private IPv4 addresses from those block. It also gets a public IPv4/31 address.
 * Every new device in the project and facility will automatically get IPv6 and private IPv4 addresses from these pre-allocated blocks.
 * The IPv6 and private IPv4 blocks can&#39;t be created, only imported. With this resource, it&#39;s possible to create either public IPv4 blocks or global IPv4 blocks.
 * 
 * Public blocks are allocated in a facility. Addresses from public blocks can only be assigned to devices in the facility. Public blocks can have mask from /24 (256 addresses) to /32 (1 address). If you create public block with this resource, you must fill the facility argmument.
 * 
 * Addresses from global blocks can be assigned in any facility. Global blocks can have mask from /30 (4 addresses), to /32 (1 address). If you create global block with this resource, you must specify type = &#34;global_ipv4&#34; and you must omit the facility argument.
 * 
 * Once IP block is allocated or imported, an address from it can be assigned to device with the `equinix-metal.IpAttachment` resource.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * This resource can be imported using an existing IP reservation ID
 * 
 * ```sh
 *  $ pulumi import equinix-metal:index/reservedIpBlock:ReservedIpBlock metal_reserved_ip_block {existing_ip_reservation_id}
 * ```
 * 
 */
@ResourceType(type="equinix-metal:index/reservedIpBlock:ReservedIpBlock")
public class ReservedIpBlock extends com.pulumi.resources.CustomResource {
    @Export(name="address", type=String.class, parameters={})
    private Output<String> address;

    public Output<String> address() {
        return this.address;
    }
    /**
     * Address family as integer (4 or 6)
     * 
     */
    @Export(name="addressFamily", type=Integer.class, parameters={})
    private Output<Integer> addressFamily;

    /**
     * @return Address family as integer (4 or 6)
     * 
     */
    public Output<Integer> addressFamily() {
        return this.addressFamily;
    }
    /**
     * length of CIDR prefix of the block as integer
     * 
     */
    @Export(name="cidr", type=Integer.class, parameters={})
    private Output<Integer> cidr;

    /**
     * @return length of CIDR prefix of the block as integer
     * 
     */
    public Output<Integer> cidr() {
        return this.cidr;
    }
    /**
     * Address and mask in CIDR notation, e.g. &#34;147.229.15.30/31&#34;
     * 
     */
    @Export(name="cidrNotation", type=String.class, parameters={})
    private Output<String> cidrNotation;

    /**
     * @return Address and mask in CIDR notation, e.g. &#34;147.229.15.30/31&#34;
     * 
     */
    public Output<String> cidrNotation() {
        return this.cidrNotation;
    }
    /**
     * Arbitrary description
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Arbitrary description
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `metro`
     * 
     */
    @Export(name="facility", type=String.class, parameters={})
    private Output</* @Nullable */ String> facility;

    /**
     * @return Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `metro`
     * 
     */
    public Output<Optional<String>> facility() {
        return Codegen.optional(this.facility);
    }
    @Export(name="gateway", type=String.class, parameters={})
    private Output<String> gateway;

    public Output<String> gateway() {
        return this.gateway;
    }
    /**
     * boolean flag whether addresses from a block are global (i.e. can be assigned in any facility)
     * 
     */
    @Export(name="global", type=Boolean.class, parameters={})
    private Output<Boolean> global;

    /**
     * @return boolean flag whether addresses from a block are global (i.e. can be assigned in any facility)
     * 
     */
    public Output<Boolean> global() {
        return this.global;
    }
    @Export(name="manageable", type=Boolean.class, parameters={})
    private Output<Boolean> manageable;

    public Output<Boolean> manageable() {
        return this.manageable;
    }
    @Export(name="management", type=Boolean.class, parameters={})
    private Output<Boolean> management;

    public Output<Boolean> management() {
        return this.management;
    }
    /**
     * Metro where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `facility`
     * 
     */
    @Export(name="metro", type=String.class, parameters={})
    private Output</* @Nullable */ String> metro;

    /**
     * @return Metro where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `facility`
     * 
     */
    public Output<Optional<String>> metro() {
        return Codegen.optional(this.metro);
    }
    /**
     * Mask in decimal notation, e.g. &#34;255.255.255.0&#34;
     * 
     */
    @Export(name="netmask", type=String.class, parameters={})
    private Output<String> netmask;

    /**
     * @return Mask in decimal notation, e.g. &#34;255.255.255.0&#34;
     * 
     */
    public Output<String> netmask() {
        return this.netmask;
    }
    /**
     * Network IP address portion of the block specification
     * 
     */
    @Export(name="network", type=String.class, parameters={})
    private Output<String> network;

    /**
     * @return Network IP address portion of the block specification
     * 
     */
    public Output<String> network() {
        return this.network;
    }
    /**
     * The metal project ID where to allocate the address block
     * 
     */
    @Export(name="projectId", type=String.class, parameters={})
    private Output<String> projectId;

    /**
     * @return The metal project ID where to allocate the address block
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * boolean flag whether addresses from a block are public
     * 
     */
    @Export(name="public", type=Boolean.class, parameters={})
    private Output<Boolean> public_;

    /**
     * @return boolean flag whether addresses from a block are public
     * 
     */
    public Output<Boolean> public_() {
        return this.public_;
    }
    /**
     * The number of allocated /32 addresses, a power of 2
     * 
     */
    @Export(name="quantity", type=Integer.class, parameters={})
    private Output<Integer> quantity;

    /**
     * @return The number of allocated /32 addresses, a power of 2
     * 
     */
    public Output<Integer> quantity() {
        return this.quantity;
    }
    /**
     * String list of tags
     * 
     */
    @Export(name="tags", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return String list of tags
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Either &#34;global_ipv4&#34; or &#34;public_ipv4&#34;, defaults to &#34;public_ipv4&#34; for backward compatibility
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output</* @Nullable */ String> type;

    /**
     * @return Either &#34;global_ipv4&#34; or &#34;public_ipv4&#34;, defaults to &#34;public_ipv4&#34; for backward compatibility
     * 
     */
    public Output<Optional<String>> type() {
        return Codegen.optional(this.type);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ReservedIpBlock(String name) {
        this(name, ReservedIpBlockArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ReservedIpBlock(String name, ReservedIpBlockArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ReservedIpBlock(String name, ReservedIpBlockArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix-metal:index/reservedIpBlock:ReservedIpBlock", name, args == null ? ReservedIpBlockArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ReservedIpBlock(String name, Output<String> id, @Nullable ReservedIpBlockState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix-metal:index/reservedIpBlock:ReservedIpBlock", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ReservedIpBlock get(String name, Output<String> id, @Nullable ReservedIpBlockState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ReservedIpBlock(name, id, state, options);
    }
}
