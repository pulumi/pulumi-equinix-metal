// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.equinixmetal;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.equinixmetal.ConnectionArgs;
import com.pulumi.equinixmetal.Utilities;
import com.pulumi.equinixmetal.inputs.ConnectionState;
import com.pulumi.equinixmetal.outputs.ConnectionPort;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use this resource to request of create an Interconnection from [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinixmetal.Connection;
 * import com.pulumi.equinixmetal.ConnectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new Connection(&#34;test&#34;, ConnectionArgs.builder()        
 *             .organizationId(local.my_organization_id())
 *             .projectId(local.my_project_id())
 *             .metro(&#34;sv&#34;)
 *             .redundancy(&#34;redundant&#34;)
 *             .type(&#34;shared&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="equinix-metal:index/connection:Connection")
public class Connection extends com.pulumi.resources.CustomResource {
    /**
     * Description for the connection resource
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description for the connection resource
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Facility where the connection will be created
     * 
     */
    @Export(name="facility", refs={String.class}, tree="[0]")
    private Output<String> facility;

    /**
     * @return Facility where the connection will be created
     * 
     */
    public Output<String> facility() {
        return this.facility;
    }
    /**
     * Metro where the connection will be created
     * 
     */
    @Export(name="metro", refs={String.class}, tree="[0]")
    private Output<String> metro;

    /**
     * @return Metro where the connection will be created
     * 
     */
    public Output<String> metro() {
        return this.metro;
    }
    /**
     * Mode for connections in IBX facilities with the dedicated type - standard or tunnel
     * 
     */
    @Export(name="mode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mode;

    /**
     * @return Mode for connections in IBX facilities with the dedicated type - standard or tunnel
     * 
     */
    public Output<Optional<String>> mode() {
        return Codegen.optional(this.mode);
    }
    /**
     * Name of the connection resource
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the connection resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * ID of the organization responsible for the connection
     * 
     */
    @Export(name="organizationId", refs={String.class}, tree="[0]")
    private Output<String> organizationId;

    /**
     * @return ID of the organization responsible for the connection
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }
    /**
     * List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of port is described in documentation of the equinix-metal.Connection datasource.
     * 
     */
    @Export(name="ports", refs={List.class,ConnectionPort.class}, tree="[0,1]")
    private Output<List<ConnectionPort>> ports;

    /**
     * @return List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of port is described in documentation of the equinix-metal.Connection datasource.
     * 
     */
    public Output<List<ConnectionPort>> ports() {
        return this.ports;
    }
    /**
     * ID of the project where the connection is scoped to, must be set for shared connection
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return ID of the project where the connection is scoped to, must be set for shared connection
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Connection redundancy - redundant or primary
     * 
     */
    @Export(name="redundancy", refs={String.class}, tree="[0]")
    private Output<String> redundancy;

    /**
     * @return Connection redundancy - redundant or primary
     * 
     */
    public Output<String> redundancy() {
        return this.redundancy;
    }
    /**
     * Port speed in bits per second
     * 
     */
    @Export(name="speed", refs={Integer.class}, tree="[0]")
    private Output<Integer> speed;

    /**
     * @return Port speed in bits per second
     * 
     */
    public Output<Integer> speed() {
        return this.speed;
    }
    /**
     * Status of the connection resource
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the connection resource
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * String list of tags
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return String list of tags
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Fabric Token from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard)
     * 
     */
    @Export(name="token", refs={String.class}, tree="[0]")
    private Output<String> token;

    /**
     * @return Fabric Token from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard)
     * 
     */
    public Output<String> token() {
        return this.token;
    }
    /**
     * Connection type - dedicated or shared
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Connection type - dedicated or shared
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Connection(String name) {
        this(name, ConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Connection(String name, ConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Connection(String name, ConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix-metal:index/connection:Connection", name, args == null ? ConnectionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Connection(String name, Output<String> id, @Nullable ConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix-metal:index/connection:Connection", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Connection get(String name, Output<String> id, @Nullable ConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Connection(name, id, state, options);
    }
}
