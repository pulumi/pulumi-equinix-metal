// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.equinixmetal;

import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.equinixmetal.enums.Facility;
import com.pulumi.equinixmetal.enums.IpBlockType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservedIpBlockArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReservedIpBlockArgs Empty = new ReservedIpBlockArgs();

    /**
     * Arbitrary description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Arbitrary description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `metro`
     * 
     */
    @Import(name="facility")
    private @Nullable Output<Either<String,Facility>> facility;

    /**
     * @return Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `metro`
     * 
     */
    public Optional<Output<Either<String,Facility>>> facility() {
        return Optional.ofNullable(this.facility);
    }

    /**
     * Metro where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `facility`
     * 
     */
    @Import(name="metro")
    private @Nullable Output<String> metro;

    /**
     * @return Metro where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `facility`
     * 
     */
    public Optional<Output<String>> metro() {
        return Optional.ofNullable(this.metro);
    }

    /**
     * The metal project ID where to allocate the address block
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The metal project ID where to allocate the address block
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The number of allocated /32 addresses, a power of 2
     * 
     */
    @Import(name="quantity", required=true)
    private Output<Integer> quantity;

    /**
     * @return The number of allocated /32 addresses, a power of 2
     * 
     */
    public Output<Integer> quantity() {
        return this.quantity;
    }

    /**
     * String list of tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return String list of tags
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Either &#34;global_ipv4&#34; or &#34;public_ipv4&#34;, defaults to &#34;public_ipv4&#34; for backward compatibility
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,IpBlockType>> type;

    /**
     * @return Either &#34;global_ipv4&#34; or &#34;public_ipv4&#34;, defaults to &#34;public_ipv4&#34; for backward compatibility
     * 
     */
    public Optional<Output<Either<String,IpBlockType>>> type() {
        return Optional.ofNullable(this.type);
    }

    private ReservedIpBlockArgs() {}

    private ReservedIpBlockArgs(ReservedIpBlockArgs $) {
        this.description = $.description;
        this.facility = $.facility;
        this.metro = $.metro;
        this.projectId = $.projectId;
        this.quantity = $.quantity;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservedIpBlockArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservedIpBlockArgs $;

        public Builder() {
            $ = new ReservedIpBlockArgs();
        }

        public Builder(ReservedIpBlockArgs defaults) {
            $ = new ReservedIpBlockArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Arbitrary description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Arbitrary description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param facility Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `metro`
         * 
         * @return builder
         * 
         */
        public Builder facility(@Nullable Output<Either<String,Facility>> facility) {
            $.facility = facility;
            return this;
        }

        /**
         * @param facility Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `metro`
         * 
         * @return builder
         * 
         */
        public Builder facility(Either<String,Facility> facility) {
            return facility(Output.of(facility));
        }

        /**
         * @param facility Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `metro`
         * 
         * @return builder
         * 
         */
        public Builder facility(String facility) {
            return facility(Either.ofLeft(facility));
        }

        /**
         * @param facility Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `metro`
         * 
         * @return builder
         * 
         */
        public Builder facility(Facility facility) {
            return facility(Either.ofRight(facility));
        }

        /**
         * @param metro Metro where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `facility`
         * 
         * @return builder
         * 
         */
        public Builder metro(@Nullable Output<String> metro) {
            $.metro = metro;
            return this;
        }

        /**
         * @param metro Metro where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with `facility`
         * 
         * @return builder
         * 
         */
        public Builder metro(String metro) {
            return metro(Output.of(metro));
        }

        /**
         * @param projectId The metal project ID where to allocate the address block
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The metal project ID where to allocate the address block
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param quantity The number of allocated /32 addresses, a power of 2
         * 
         * @return builder
         * 
         */
        public Builder quantity(Output<Integer> quantity) {
            $.quantity = quantity;
            return this;
        }

        /**
         * @param quantity The number of allocated /32 addresses, a power of 2
         * 
         * @return builder
         * 
         */
        public Builder quantity(Integer quantity) {
            return quantity(Output.of(quantity));
        }

        /**
         * @param tags String list of tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags String list of tags
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags String list of tags
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type Either &#34;global_ipv4&#34; or &#34;public_ipv4&#34;, defaults to &#34;public_ipv4&#34; for backward compatibility
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,IpBlockType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Either &#34;global_ipv4&#34; or &#34;public_ipv4&#34;, defaults to &#34;public_ipv4&#34; for backward compatibility
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,IpBlockType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Either &#34;global_ipv4&#34; or &#34;public_ipv4&#34;, defaults to &#34;public_ipv4&#34; for backward compatibility
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Either &#34;global_ipv4&#34; or &#34;public_ipv4&#34;, defaults to &#34;public_ipv4&#34; for backward compatibility
         * 
         * @return builder
         * 
         */
        public Builder type(IpBlockType type) {
            return type(Either.ofRight(type));
        }

        public ReservedIpBlockArgs build() {
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.quantity = Objects.requireNonNull($.quantity, "expected parameter 'quantity' to be non-null");
            return $;
        }
    }

}
