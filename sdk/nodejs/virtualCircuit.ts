// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this resource to associate VLAN with a Dedicated Port from [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/#associating-a-vlan-with-a-dedicated-port).
 *
 * ## Example Usage
 *
 * Pick an existing Project and Connection, create a VLAN and use `equinix-metal.VirtualCircuit` to associate it with a Primary Port of the Connection.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix_metal from "@pulumi/equinix-metal";
 *
 * const projectId = "52000fb2-ee46-4673-93a8-de2c2bdba33c";
 * const connId = "73f12f29-3e19-43a0-8e90-ae81580db1e0";
 * const testConnection = equinix_metal.getConnection({
 *     connectionId: connId,
 * });
 * const testVlan = new equinix_metal.Vlan("testVlan", {
 *     projectId: projectId,
 *     metro: testConnection.then(testConnection => testConnection.metro),
 * });
 * const testVirtualCircuit = new equinix_metal.VirtualCircuit("testVirtualCircuit", {
 *     connectionId: connId,
 *     projectId: projectId,
 *     portId: testConnection.then(testConnection => testConnection.ports[0].id),
 *     vlanId: testVlan.id,
 *     nniVlan: 1056,
 * });
 * ```
 */
export class VirtualCircuit extends pulumi.CustomResource {
    /**
     * Get an existing VirtualCircuit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualCircuitState, opts?: pulumi.CustomResourceOptions): VirtualCircuit {
        return new VirtualCircuit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix-metal:index/virtualCircuit:VirtualCircuit';

    /**
     * Returns true if the given object is an instance of VirtualCircuit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualCircuit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualCircuit.__pulumiType;
    }

    /**
     * UUID of Connection where the VC is scoped to
     */
    public readonly connectionId!: pulumi.Output<string>;
    /**
     * Name of the Virtual Circuit resource
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Equinix Metal network-to-network VLAN ID
     */
    public readonly nniVlan!: pulumi.Output<number>;
    /**
     * Nni VLAN ID parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
     */
    public /*out*/ readonly nniVnid!: pulumi.Output<number>;
    /**
     * UUID of the Connection Port where the VC is scoped to
     */
    public readonly portId!: pulumi.Output<string>;
    /**
     * UUID of the Project where the VC is scoped to
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Status of the virtal circuit
     * * `vnid`
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * UUID of the VLAN to associate
     */
    public readonly vlanId!: pulumi.Output<string>;
    /**
     * VNID VLAN parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
     */
    public /*out*/ readonly vnid!: pulumi.Output<number>;

    /**
     * Create a VirtualCircuit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualCircuitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualCircuitArgs | VirtualCircuitState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualCircuitState | undefined;
            inputs["connectionId"] = state ? state.connectionId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nniVlan"] = state ? state.nniVlan : undefined;
            inputs["nniVnid"] = state ? state.nniVnid : undefined;
            inputs["portId"] = state ? state.portId : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["vlanId"] = state ? state.vlanId : undefined;
            inputs["vnid"] = state ? state.vnid : undefined;
        } else {
            const args = argsOrState as VirtualCircuitArgs | undefined;
            if ((!args || args.connectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionId'");
            }
            if ((!args || args.nniVlan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nniVlan'");
            }
            if ((!args || args.portId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.vlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlanId'");
            }
            inputs["connectionId"] = args ? args.connectionId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nniVlan"] = args ? args.nniVlan : undefined;
            inputs["portId"] = args ? args.portId : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["vlanId"] = args ? args.vlanId : undefined;
            inputs["nniVnid"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["vnid"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(VirtualCircuit.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualCircuit resources.
 */
export interface VirtualCircuitState {
    /**
     * UUID of Connection where the VC is scoped to
     */
    readonly connectionId?: pulumi.Input<string>;
    /**
     * Name of the Virtual Circuit resource
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Equinix Metal network-to-network VLAN ID
     */
    readonly nniVlan?: pulumi.Input<number>;
    /**
     * Nni VLAN ID parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
     */
    readonly nniVnid?: pulumi.Input<number>;
    /**
     * UUID of the Connection Port where the VC is scoped to
     */
    readonly portId?: pulumi.Input<string>;
    /**
     * UUID of the Project where the VC is scoped to
     */
    readonly projectId?: pulumi.Input<string>;
    /**
     * Status of the virtal circuit
     * * `vnid`
     */
    readonly status?: pulumi.Input<string>;
    /**
     * UUID of the VLAN to associate
     */
    readonly vlanId?: pulumi.Input<string>;
    /**
     * VNID VLAN parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
     */
    readonly vnid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VirtualCircuit resource.
 */
export interface VirtualCircuitArgs {
    /**
     * UUID of Connection where the VC is scoped to
     */
    readonly connectionId: pulumi.Input<string>;
    /**
     * Name of the Virtual Circuit resource
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Equinix Metal network-to-network VLAN ID
     */
    readonly nniVlan: pulumi.Input<number>;
    /**
     * UUID of the Connection Port where the VC is scoped to
     */
    readonly portId: pulumi.Input<string>;
    /**
     * UUID of the Project where the VC is scoped to
     */
    readonly projectId: pulumi.Input<string>;
    /**
     * UUID of the VLAN to associate
     */
    readonly vlanId: pulumi.Input<string>;
}
