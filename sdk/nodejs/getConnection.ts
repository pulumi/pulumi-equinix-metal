// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "./types";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve a connection resource from [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as metal from "@pulumi/metal";
 *
 * const example = pulumi.output(metal.getConnection({
 *     connectionId: "4347e805-eb46-4699-9eb9-5c116e6a017d",
 * }));
 * ```
 */
export function getConnection(args: GetConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectionResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("equinix-metal:index/getConnection:getConnection", {
        "connectionId": args.connectionId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnection.
 */
export interface GetConnectionArgs {
    /**
     * ID of the connection resource
     */
    connectionId: string;
}

/**
 * A collection of values returned by getConnection.
 */
export interface GetConnectionResult {
    readonly connectionId: string;
    /**
     * Description of the connection resource
     */
    readonly description: string;
    /**
     * Slug of a facility to which the connection belongs
     */
    readonly facility: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Slug of a metro to which the connection belongs
     */
    readonly metro: string;
    /**
     * Mode for connections in IBX facilities with the dedicated type - standard or tunnel
     */
    readonly mode: string;
    /**
     * Port name
     */
    readonly name: string;
    /**
     * ID of organization to which the connection belongs
     */
    readonly organizationId: string;
    /**
     * List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)
     */
    readonly ports: outputs.GetConnectionPort[];
    /**
     * ID of project to which the connection belongs
     */
    readonly projectId: string;
    /**
     * Connection redundancy, reduntant or primary
     */
    readonly redundancy: string;
    /**
     * Port speed in bits per second
     */
    readonly speed: number;
    /**
     * Port status
     */
    readonly status: string;
    /**
     * String list of tags
     */
    readonly tags: string[];
    /**
     * Fabric Token for the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard)
     */
    readonly token: string;
    /**
     * Connection type, dedicated or shared
     */
    readonly type: string;
}

export function getConnectionOutput(args: GetConnectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConnectionResult> {
    return pulumi.output(args).apply(a => getConnection(a, opts))
}

/**
 * A collection of arguments for invoking getConnection.
 */
export interface GetConnectionOutputArgs {
    /**
     * ID of the connection resource
     */
    connectionId: pulumi.Input<string>;
}
