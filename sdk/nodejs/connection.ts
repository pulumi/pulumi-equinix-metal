// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "./types";
import * as utilities from "./utilities";

/**
 * Use this resource to request of create an Interconnection from [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix_metal from "@pulumi/equinix-metal";
 *
 * const test = new equinix_metal.Connection("test", {
 *     organizationId: local.my_organization_id,
 *     projectId: local.my_project_id,
 *     metro: "sv",
 *     redundancy: "redundant",
 *     type: "shared",
 * });
 * ```
 */
export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix-metal:index/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * Description for the connection resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Facility where the connection will be created
     */
    public readonly facility!: pulumi.Output<string>;
    /**
     * Metro where the connection will be created
     */
    public readonly metro!: pulumi.Output<string>;
    /**
     * Mode for connections in IBX facilities with the dedicated type - standard or tunnel
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * Name of the connection resource
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the organization responsible for the connection
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of port is described in documentation of the equinix-metal.Connection datasource.
     */
    public /*out*/ readonly ports!: pulumi.Output<outputs.ConnectionPort[]>;
    /**
     * ID of the project where the connection is scoped to, must be set for shared connection
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Connection redundancy - redundant or primary
     */
    public readonly redundancy!: pulumi.Output<string>;
    /**
     * Port speed in bits per second
     */
    public /*out*/ readonly speed!: pulumi.Output<number>;
    /**
     * Status of the connection resource
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * String list of tags
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Fabric Token from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard)
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * Connection type - dedicated or shared
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["facility"] = state ? state.facility : undefined;
            inputs["metro"] = state ? state.metro : undefined;
            inputs["mode"] = state ? state.mode : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["organizationId"] = state ? state.organizationId : undefined;
            inputs["ports"] = state ? state.ports : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["redundancy"] = state ? state.redundancy : undefined;
            inputs["speed"] = state ? state.speed : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["token"] = state ? state.token : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.redundancy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redundancy'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["facility"] = args ? args.facility : undefined;
            inputs["metro"] = args ? args.metro : undefined;
            inputs["mode"] = args ? args.mode : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["organizationId"] = args ? args.organizationId : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["redundancy"] = args ? args.redundancy : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["ports"] = undefined /*out*/;
            inputs["speed"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["token"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Connection.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * Description for the connection resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Facility where the connection will be created
     */
    readonly facility?: pulumi.Input<string>;
    /**
     * Metro where the connection will be created
     */
    readonly metro?: pulumi.Input<string>;
    /**
     * Mode for connections in IBX facilities with the dedicated type - standard or tunnel
     */
    readonly mode?: pulumi.Input<string>;
    /**
     * Name of the connection resource
     */
    readonly name?: pulumi.Input<string>;
    /**
     * ID of the organization responsible for the connection
     */
    readonly organizationId?: pulumi.Input<string>;
    /**
     * List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of port is described in documentation of the equinix-metal.Connection datasource.
     */
    readonly ports?: pulumi.Input<pulumi.Input<inputs.ConnectionPort>[]>;
    /**
     * ID of the project where the connection is scoped to, must be set for shared connection
     */
    readonly projectId?: pulumi.Input<string>;
    /**
     * Connection redundancy - redundant or primary
     */
    readonly redundancy?: pulumi.Input<string>;
    /**
     * Port speed in bits per second
     */
    readonly speed?: pulumi.Input<number>;
    /**
     * Status of the connection resource
     */
    readonly status?: pulumi.Input<string>;
    /**
     * String list of tags
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Fabric Token from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard)
     */
    readonly token?: pulumi.Input<string>;
    /**
     * Connection type - dedicated or shared
     */
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * Description for the connection resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Facility where the connection will be created
     */
    readonly facility?: pulumi.Input<string>;
    /**
     * Metro where the connection will be created
     */
    readonly metro?: pulumi.Input<string>;
    /**
     * Mode for connections in IBX facilities with the dedicated type - standard or tunnel
     */
    readonly mode?: pulumi.Input<string>;
    /**
     * Name of the connection resource
     */
    readonly name?: pulumi.Input<string>;
    /**
     * ID of the organization responsible for the connection
     */
    readonly organizationId: pulumi.Input<string>;
    /**
     * ID of the project where the connection is scoped to, must be set for shared connection
     */
    readonly projectId?: pulumi.Input<string>;
    /**
     * Connection redundancy - redundant or primary
     */
    readonly redundancy: pulumi.Input<string>;
    /**
     * String list of tags
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Connection type - dedicated or shared
     */
    readonly type: pulumi.Input<string>;
}
