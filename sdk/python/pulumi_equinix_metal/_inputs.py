# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._enums import *

__all__ = [
    'ConnectionPortArgs',
    'DeviceIpAddressArgs',
    'DeviceNetworkArgs',
    'DevicePortArgs',
    'DeviceReinstallArgs',
    'ProjectBgpConfigArgs',
    'SpotMarketRequestInstanceParametersArgs',
    'VolumeAttachmentArgs',
    'VolumeSnapshotPolicyArgs',
    'GetFacilityCapacityArgs',
    'GetMetroCapacityArgs',
]

@pulumi.input_type
class ConnectionPortArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 link_status: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 virtual_circuit_ids: Optional[pulumi.Input[Sequence[Any]]] = None):
        """
        :param pulumi.Input[str] name: Name of the connection resource
        :param pulumi.Input[int] speed: Port speed in bits per second
        :param pulumi.Input[str] status: Status of the connection resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if link_status is not None:
            pulumi.set(__self__, "link_status", link_status)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if virtual_circuit_ids is not None:
            pulumi.set(__self__, "virtual_circuit_ids", virtual_circuit_ids)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="linkStatus")
    def link_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_status")

    @link_status.setter
    def link_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_status", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the connection resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[int]]:
        """
        Port speed in bits per second
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the connection resource
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="virtualCircuitIds")
    def virtual_circuit_ids(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "virtual_circuit_ids")

    @virtual_circuit_ids.setter
    def virtual_circuit_ids(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "virtual_circuit_ids", value)


@pulumi.input_type
class DeviceIpAddressArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cidr: Optional[pulumi.Input[int]] = None,
                 reservation_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] type: One of [`private_ipv4`, `public_ipv4`, `public_ipv6`]
        :param pulumi.Input[int] cidr: CIDR suffix for IP address block to be assigned, i.e. amount of addresses.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reservation_ids: List of UUIDs of IP block reservations from which the public IPv4 address should be taken.
        """
        pulumi.set(__self__, "type", type)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if reservation_ids is not None:
            pulumi.set(__self__, "reservation_ids", reservation_ids)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        One of [`private_ipv4`, `public_ipv4`, `public_ipv6`]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[int]]:
        """
        CIDR suffix for IP address block to be assigned, i.e. amount of addresses.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="reservationIds")
    def reservation_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of UUIDs of IP block reservations from which the public IPv4 address should be taken.
        """
        return pulumi.get(self, "reservation_ids")

    @reservation_ids.setter
    def reservation_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reservation_ids", value)


@pulumi.input_type
class DeviceNetworkArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 cidr: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] address: IPv4 or IPv6 address string
        :param pulumi.Input[int] cidr: CIDR suffix for IP address block to be assigned, i.e. amount of addresses.
        :param pulumi.Input[int] family: IP version - "4" or "6"
               * `network_type` Network type of a device, used in [Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Will be one of `layer3`, `hybrid`, `layer2-individual` and `layer2-bonded`.
        :param pulumi.Input[str] gateway: address of router
        :param pulumi.Input[bool] public: whether the address is routable from the Internet
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if public is not None:
            pulumi.set(__self__, "public", public)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 or IPv6 address string
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[int]]:
        """
        CIDR suffix for IP address block to be assigned, i.e. amount of addresses.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[int]]:
        """
        IP version - "4" or "6"
        * `network_type` Network type of a device, used in [Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Will be one of `layer3`, `hybrid`, `layer2-individual` and `layer2-bonded`.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        address of router
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        """
        whether the address is routable from the Internet
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)


@pulumi.input_type
class DevicePortArgs:
    def __init__(__self__, *,
                 bonded: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] bonded: Whether this port is part of a bond in bonded network setup
        :param pulumi.Input[str] id: ID of the port
        :param pulumi.Input[str] mac: MAC address assigned to the port
        :param pulumi.Input[str] name: Name of the port (e.g. `eth0`, or `bond0`)
        :param pulumi.Input[str] type: One of [`private_ipv4`, `public_ipv4`, `public_ipv6`]
        """
        if bonded is not None:
            pulumi.set(__self__, "bonded", bonded)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def bonded(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this port is part of a bond in bonded network setup
        """
        return pulumi.get(self, "bonded")

    @bonded.setter
    def bonded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bonded", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the port
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address assigned to the port
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the port (e.g. `eth0`, or `bond0`)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        One of [`private_ipv4`, `public_ipv4`, `public_ipv6`]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeviceReinstallArgs:
    def __init__(__self__, *,
                 deprovision_fast: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 preserve_data: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] deprovision_fast: Whether the OS disk should be filled with `00h` bytes before reinstall. Defaults to `false`.
        :param pulumi.Input[bool] enabled: Whether the provider should favour reinstall over destroy and create. Defaults to `false`.
        :param pulumi.Input[bool] preserve_data: Whether the non-OS disks should be kept or wiped during reinstall. Defaults to `false`.
        """
        if deprovision_fast is not None:
            pulumi.set(__self__, "deprovision_fast", deprovision_fast)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if preserve_data is not None:
            pulumi.set(__self__, "preserve_data", preserve_data)

    @property
    @pulumi.getter(name="deprovisionFast")
    def deprovision_fast(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the OS disk should be filled with `00h` bytes before reinstall. Defaults to `false`.
        """
        return pulumi.get(self, "deprovision_fast")

    @deprovision_fast.setter
    def deprovision_fast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deprovision_fast", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the provider should favour reinstall over destroy and create. Defaults to `false`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="preserveData")
    def preserve_data(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the non-OS disks should be kept or wiped during reinstall. Defaults to `false`.
        """
        return pulumi.get(self, "preserve_data")

    @preserve_data.setter
    def preserve_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_data", value)


@pulumi.input_type
class ProjectBgpConfigArgs:
    def __init__(__self__, *,
                 asn: pulumi.Input[int],
                 deployment_type: pulumi.Input[str],
                 max_prefix: Optional[pulumi.Input[int]] = None,
                 md5: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] asn: Autonomous System Number for local BGP deployment
        :param pulumi.Input[str] deployment_type: `private` or `public`, the `private` is likely to be usable immediately, the `public` will need to be review by Equinix Metal engineers
        :param pulumi.Input[int] max_prefix: The maximum number of route filters allowed per server
        :param pulumi.Input[str] md5: Password for BGP session in plaintext (not a checksum)
        :param pulumi.Input[str] status: status of BGP configuration in the project
        """
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "deployment_type", deployment_type)
        if max_prefix is not None:
            pulumi.set(__self__, "max_prefix", max_prefix)
        if md5 is not None:
            pulumi.set(__self__, "md5", md5)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def asn(self) -> pulumi.Input[int]:
        """
        Autonomous System Number for local BGP deployment
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: pulumi.Input[int]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> pulumi.Input[str]:
        """
        `private` or `public`, the `private` is likely to be usable immediately, the `public` will need to be review by Equinix Metal engineers
        """
        return pulumi.get(self, "deployment_type")

    @deployment_type.setter
    def deployment_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_type", value)

    @property
    @pulumi.getter(name="maxPrefix")
    def max_prefix(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of route filters allowed per server
        """
        return pulumi.get(self, "max_prefix")

    @max_prefix.setter
    def max_prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_prefix", value)

    @property
    @pulumi.getter
    def md5(self) -> Optional[pulumi.Input[str]]:
        """
        Password for BGP session in plaintext (not a checksum)
        """
        return pulumi.get(self, "md5")

    @md5.setter
    def md5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of BGP configuration in the project
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SpotMarketRequestInstanceParametersArgs:
    def __init__(__self__, *,
                 billing_cycle: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 operating_system: pulumi.Input[str],
                 plan: pulumi.Input[str],
                 always_pxe: Optional[pulumi.Input[bool]] = None,
                 customdata: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipxe_script_url: Optional[pulumi.Input[str]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 project_ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 termintation_time: Optional[pulumi.Input[str]] = None,
                 user_ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 userdata: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] locked: Blocks deletion of the SpotMarketRequest device until the lock is disabled
        """
        pulumi.set(__self__, "billing_cycle", billing_cycle)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "plan", plan)
        if always_pxe is not None:
            pulumi.set(__self__, "always_pxe", always_pxe)
        if customdata is not None:
            pulumi.set(__self__, "customdata", customdata)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if ipxe_script_url is not None:
            pulumi.set(__self__, "ipxe_script_url", ipxe_script_url)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if project_ssh_keys is not None:
            pulumi.set(__self__, "project_ssh_keys", project_ssh_keys)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if termintation_time is not None:
            pulumi.set(__self__, "termintation_time", termintation_time)
        if user_ssh_keys is not None:
            pulumi.set(__self__, "user_ssh_keys", user_ssh_keys)
        if userdata is not None:
            pulumi.set(__self__, "userdata", userdata)

    @property
    @pulumi.getter(name="billingCycle")
    def billing_cycle(self) -> pulumi.Input[str]:
        return pulumi.get(self, "billing_cycle")

    @billing_cycle.setter
    def billing_cycle(self, value: pulumi.Input[str]):
        pulumi.set(self, "billing_cycle", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: pulumi.Input[str]):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="alwaysPxe")
    def always_pxe(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "always_pxe")

    @always_pxe.setter
    def always_pxe(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_pxe", value)

    @property
    @pulumi.getter
    def customdata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customdata")

    @customdata.setter
    def customdata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customdata", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="ipxeScriptUrl")
    def ipxe_script_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipxe_script_url")

    @ipxe_script_url.setter
    def ipxe_script_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipxe_script_url", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[bool]]:
        """
        Blocks deletion of the SpotMarketRequest device until the lock is disabled
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="projectSshKeys")
    def project_ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "project_ssh_keys")

    @project_ssh_keys.setter
    def project_ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_ssh_keys", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="termintationTime")
    def termintation_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "termintation_time")

    @termintation_time.setter
    def termintation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termintation_time", value)

    @property
    @pulumi.getter(name="userSshKeys")
    def user_ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_ssh_keys")

    @user_ssh_keys.setter
    def user_ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_ssh_keys", value)

    @property
    @pulumi.getter
    def userdata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "userdata")

    @userdata.setter
    def userdata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "userdata", value)


@pulumi.input_type
class VolumeAttachmentArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None):
        if href is not None:
            pulumi.set(__self__, "href", href)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)


@pulumi.input_type
class VolumeSnapshotPolicyArgs:
    def __init__(__self__, *,
                 snapshot_count: pulumi.Input[int],
                 snapshot_frequency: pulumi.Input[str]):
        pulumi.set(__self__, "snapshot_count", snapshot_count)
        pulumi.set(__self__, "snapshot_frequency", snapshot_frequency)

    @property
    @pulumi.getter(name="snapshotCount")
    def snapshot_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "snapshot_count")

    @snapshot_count.setter
    def snapshot_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "snapshot_count", value)

    @property
    @pulumi.getter(name="snapshotFrequency")
    def snapshot_frequency(self) -> pulumi.Input[str]:
        return pulumi.get(self, "snapshot_frequency")

    @snapshot_frequency.setter
    def snapshot_frequency(self, value: pulumi.Input[str]):
        pulumi.set(self, "snapshot_frequency", value)


@pulumi.input_type
class GetFacilityCapacityArgs:
    def __init__(__self__, *,
                 plan: str,
                 quantity: Optional[int] = None):
        """
        :param str plan: device plan to check
        :param int quantity: number of device to check
        """
        pulumi.set(__self__, "plan", plan)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def plan(self) -> str:
        """
        device plan to check
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: str):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter
    def quantity(self) -> Optional[int]:
        """
        number of device to check
        """
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: Optional[int]):
        pulumi.set(self, "quantity", value)


@pulumi.input_type
class GetMetroCapacityArgs:
    def __init__(__self__, *,
                 plan: str,
                 quantity: Optional[int] = None):
        """
        :param str plan: device plan to check
        :param int quantity: number of device to check
        """
        pulumi.set(__self__, "plan", plan)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def plan(self) -> str:
        """
        device plan to check
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: str):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter
    def quantity(self) -> Optional[int]:
        """
        number of device to check
        """
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: Optional[int]):
        pulumi.set(self, "quantity", value)


