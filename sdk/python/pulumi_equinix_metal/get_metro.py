# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetMetroResult',
    'AwaitableGetMetroResult',
    'get_metro',
]

@pulumi.output_type
class GetMetroResult:
    """
    A collection of values returned by getMetro.
    """
    def __init__(__self__, code=None, country=None, id=None, name=None):
        if code and not isinstance(code, str):
            raise TypeError("Expected argument 'code' to be a str")
        pulumi.set(__self__, "code", code)
        if country and not isinstance(country, str):
            raise TypeError("Expected argument 'country' to be a str")
        pulumi.set(__self__, "country", country)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The code of the metro
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        The country of the metro
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the metro
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the metro
        """
        return pulumi.get(self, "name")


class AwaitableGetMetroResult(GetMetroResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetroResult(
            code=self.code,
            country=self.country,
            id=self.id,
            name=self.name)


def get_metro(code: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetroResult:
    """
    Provides an Equinix Metal metro datasource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix_metal as equinix_metal

    sv = equinix_metal.get_metro(code="sv")
    pulumi.export("id", sv.id)
    ```


    :param str code: The metro code
    """
    __args__ = dict()
    __args__['code'] = code
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('equinix-metal:index/getMetro:getMetro', __args__, opts=opts, typ=GetMetroResult).value

    return AwaitableGetMetroResult(
        code=__ret__.code,
        country=__ret__.country,
        id=__ret__.id,
        name=__ret__.name)
